% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{deeptrafo}
\alias{deeptrafo}
\title{Fitting Deep Conditional Transformation Models}
\usage{
deeptrafo(
  formula,
  data,
  lag_formula = NULL,
  response_type = get_response_type(data[[all.vars(fml)[1]]]),
  order_bsp = get_order(response_type, data[[all.vars(fml)[1]]]),
  addconst_interaction = NULL,
  family = "logistic",
  monitor_metrics = NULL,
  trafo_options = trafo_control(order_bsp = order_bsp, response_type = response_type),
  ...
)
}
\arguments{
\item{formula}{Formula specifying the outcome, shift, interaction and shared
terms as \code{response | interacting ~ shifting | shared}}

\item{data}{list or data.frame with data; must include y as column}

\item{lag_formula}{formula representing the optional predictor for lags of the
response as defined for ATMs}

\item{order_bsp}{integer; order of Bernstein polynomials}

\item{addconst_interaction}{positive constant;
a constant added to the additive predictor of the interaction term.
If \code{NULL}, terms are left unchanged. If 0 and predictors have negative values in their
design matrix, the minimum value of all predictors is added to ensure positivity.
If > 0, the minimum value plus the \code{addconst_interaction} is added to each predictor
in the interaction term.}

\item{family, }{tfd_distribution or string; the base distribution for
transformation models. If string, can be \code{"normal"} or \code{"logistic"}.}

\item{trafo_options}{options for transformation models such as the basis function used}

\item{...}{Arguments passed to \code{deepregression}}

\item{list_of_formulas}{list of formulas where the first element corresponds to
a transformation h_1 as specified in DCTMs, the second element to h_2 as specified
in DCTMs and a third element for shared layers used in both}
}
\value{
An object of class \code{c("deeptrafo", "deepregression")}
}
\description{
Fitting Deep Conditional Transformation Models
}
\details{

}
\examples{
data("wine", package = "ordinal")
wine$noise <- rnorm(nrow(wine))
fml <- rating ~ 1
m <- deeptrafo(fml, wine, family = "logistic", monitor_metric = NULL)
m \%>\% fit(epochs = 100, batch_size = nrow(wine))
predfun <- m \%>\% predict(wine)
predfun(wine$rating, type = "trafo")
plot(m)
coef(m, which_param = "h1")
coef(m, which_param = "h2")

}
